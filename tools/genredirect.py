#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License, Version 1.0 only
# (the "License").  You may not use this file except in compliance
# with the License.
#
# You can obtain a copy of the license at COPYING
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at COPYING.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright (c) 2013 Andrew Stormont.
#

import sys

argv0 = sys.argv.pop(0)

# check arguments
try:
	(in_file, out_file) = sys.argv
except ValueError:
	print >> sys.stderr, "Usage: %s <in_file> <out_file>" % argv0
	exit(1)

# create output file
out_fp = open(out_file, "wt")

# write CDDL header and function prototype
out_fp.write("""/*
 * THIS FILE WAS GENERATED BY genredirect.py.  DO NOT EDIT.
 */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
 * or http://www.opensolaris.org/os/licensing.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at usr/src/OPENSOLARIS.LICENSE.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * (c) Copyright 2013 Andrew Stormont.
 */

#include "config.h"

char *get_redirect(const char *old_path)
{
	char *new_path;

""")

# write conents of get_redirect function
if_count = 0

for line in file(in_file):
	# Skip comments and empty lines
	if line[0] in ('#', '\n'):
		continue

	# Trim newlines and whitespace
	line = line.rstrip()

	# Must be an absolute match
	if line[-1] == '$':
		out_fp.write("\t%s (strcmp(old_path, \"%s\") == 0)\n" \
			% ("else if" if if_count else "if", line[0:-1]))
		out_fp.write("\t\tnew_path = strdup(PROTO_DIR_PATH \"%s\");\n" % line[0:-1])
	else:
		out_fp.write("\t%s (strncmp(old_path, \"%s\", %s) == 0)\n" \
			% ("else if" if if_count else "if", line, len(line)))
		out_fp.write("\t\tnew_path = strdup(PROTO_DIR_PATH \"%s\");\n" % line)

	if_count += 1

# close function
out_fp.write("""\telse
		new_path = strdup(old_path);

	return new_path;
}
""")

# close file
out_fp.close()
